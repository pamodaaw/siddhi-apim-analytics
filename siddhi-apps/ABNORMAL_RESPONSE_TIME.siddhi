@App:name("ABNORMAL_RESPONSE_TIME")
@App:description("Identifies the API requests with abnormal response time and add to AllAlertStream and AbnormalResponseTimeAlertStream")

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))
define stream request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
define stream AbnormalResponseTimeAlertStream(
    apiName string,
    apiVersion string,
    apiCreator string, 
    apiCreatorTenantDomain string,
    apiResourceTemplate string,
    apiMethod string,
    responseTime long,
    thresholdResponseTime long,
    message string,
    severity int,
    alertTimestamp long);

define stream AllApimAlertsStream (type string, tenantDomain string, message string, severity int, alertTimestamp long);

@PrimaryKey('apiName', 'apiVersion','apiCreator', 'apiCreatorTenantDomain')
@store(type = 'rdbms', datasource = 'APIM_TEST')
define table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AbnormalResponseTimeAlert( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, 
    responseTime long,thresholdResponseTime long, message string, severity int, alertTimestamp long);

@info(name = 'query1')
from request join ApiCreatorAlertConfiguration
on(request.apiName == ApiCreatorAlertConfiguration.apiName and request.apiVersion == ApiCreatorAlertConfiguration.apiVersion and request.apiCreatorTenantDomain == ApiCreatorAlertConfiguration.apiCreatorTenantDomain )
select request.apiName, request.apiVersion, ifThenElse(request.apiCreatorTenantDomain == 'carbon.super', str:concat(request.apiCreator, "@carbon.super"), request.apiCreator) as apiCreator, request.apiCreatorTenantDomain, 
    request.responseTime, request.apiResourceTemplate, request.apiMethod, ApiCreatorAlertConfiguration.thresholdResponseTime
insert into ResponseTimeInfoStream;

@info(name = 'query2')
from ResponseTimeInfoStream[responseTime > thresholdResponseTime and thresholdResponseTime > 0]
select apiName, apiVersion, apiCreator, apiCreatorTenantDomain, apiResourceTemplate, apiMethod, responseTime, thresholdResponseTime , 
    'Abnormal response time detected.' as message, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AbnormalResponseTimeAlertStreamTemp;

@info(name = 'suppression1')
from AbnormalResponseTimeAlertStreamTemp#window.length(1) as a left outer join AbnormalResponseTimeAlertStreamTemp#window.time(10 minute) as b
on (a.apiName == b.apiName and a.apiVersion== b.apiVersion and a.apiCreator== b.apiCreator and a.apiCreatorTenantDomain==b.apiCreatorTenantDomain and 
    a.apiResourceTemplate==b.apiResourceTemplate and a.apiMethod== b.apiMethod and a.message== b.message)
select a.apiName as apiName, a.apiVersion as apiVersion, a.apiCreator as apiCreator, a.apiCreatorTenantDomain as apiCreatorTenantDomain, a.apiResourceTemplate as apiResourceTemplate,
    a.apiMethod as apiMethod, a.responseTime as responseTime, a.thresholdResponseTime as thresholdResponseTime, a.message as message, a.severity as severity, a.alertTimestamp as alertTimestamp
having b.apiName  is null
insert into AbnormalResponseTimeAlertStream;

@info(name = 'query3')
from AbnormalResponseTimeAlertStream
select 'abnormalResponseTime' as type, apiCreatorTenantDomain as tenantDomain, str:concat('Abnormal response time detected for http ',apiMethod,' method of resource template:',apiResourceTemplate,' in api:', apiName,' of tenant domain:',apiCreatorTenantDomain,', threshold value:',thresholdResponseTime, 'ms.') as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AllApimAlertsStream;

from AbnormalResponseTimeAlertStream
select *
insert into AbnormalResponseTimeAlert;
