@App:name("ABNORMAL_RESPONSE_TIME")
@App:description("Identifies the API requests with abnormal response time and add to AllAlertStream and AbnormalResponseTimeAlertStream")

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))
define stream Request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationame string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
define stream AbnormalResponseTimeAlertStream( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, responseTime long, thresholdResponseTime long, message string, severity int,alertTimestamp long);

@sink(type="inMemory", topic="EMAIL_NOTIFICATION", @map(type='passThrough'))
define stream EmailAlertStream (type	string, message	string, alertTimestamp	string, emails	string);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table AlertStakeholderInfo(userId string, alertTypes	string, emails	string, isSubscriber bool, isPublisher	bool, isAdmin	bool);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table AbnormalResponseTimeAlert( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, 
    responseTime long,thresholdResponseTime long, message string, severity int, alertTimestamp long);

@info(name = 'configurationInfoRetrievQuery')
from Request as R join ApiCreatorAlertConfiguration as C
on(R.apiName == C.apiName and R.apiVersion == C.apiVersion and R.apiCreatorTenantDomain == C.apiCreatorTenantDomain )
select R.apiName, R.apiVersion, ifThenElse(R.apiCreatorTenantDomain == 'carbon.super', str:concat(R.apiCreator, "@carbon.super"), R.apiCreator) as apiCreator, R.apiCreatorTenantDomain, 
    R.responseTime, R.apiResourceTemplate, R.apiMethod, C.thresholdResponseTime
insert into ResponseTimeInfoStream;

@info(name = 'responseTimeExceedFilterQuery')
from ResponseTimeInfoStream[responseTime > thresholdResponseTime and thresholdResponseTime > 0]
select apiName, apiVersion, apiCreator, apiCreatorTenantDomain, apiResourceTemplate, apiMethod, responseTime, thresholdResponseTime , 
    'Abnormal response time detected.' as message, 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AbnormalResponseTimeAlertStreamTemp;

@info(name = 'repeatedAlertIgnoreQuery')
from AbnormalResponseTimeAlertStreamTemp#window.length(1) as a left outer join AbnormalResponseTimeAlertStreamTemp#window.time(10 minute) as b
on (a.apiName == b.apiName and a.apiVersion== b.apiVersion and a.apiCreator== b.apiCreator and a.apiCreatorTenantDomain==b.apiCreatorTenantDomain and 
    a.apiResourceTemplate==b.apiResourceTemplate and a.apiMethod== b.apiMethod and a.message== b.message)
select a.apiName as apiName, a.apiVersion as apiVersion, a.apiCreator as apiCreator, a.apiCreatorTenantDomain as apiCreatorTenantDomain, a.apiResourceTemplate as apiResourceTemplate,
    a.apiMethod as apiMethod, a.responseTime as responseTime, a.thresholdResponseTime as thresholdResponseTime, a.message as message, a.severity as severity, a.alertTimestamp as alertTimestamp
having b.apiName  is null
insert into AbnormalResponseTimeAlertStream;

@info(name = 'commonAlertDabaseInsertQuery')
from AbnormalResponseTimeAlertStream
select 'AbnormalResponseTime' as type, apiCreatorTenantDomain as tenantDomain, str:concat('Abnormal response time detected for http ',apiMethod,' method of resource template:',apiResourceTemplate,' in api:', apiName,' of tenant domain:',apiCreatorTenantDomain,', threshold value:',thresholdResponseTime, 'ms.') as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AllApimAlert;

@info(name='dbInsertQuery') 
from AbnormalResponseTimeAlertStream
select *
insert into AbnormalResponseTimeAlert;

@info(name = 'customizeEmailMessageGenerateQuery')
from AbnormalResponseTimeAlertStream#window.length(1) as A join AlertStakeholderInfo as S
on ((A.apiCreator == S.userId and true == S.isPublisher ) or true == S.isAdmin )
select 'AbnormalResponseTime' as type , str:concat('Abnormal response time detected for http ',A.apiMethod,' method of resource template:',A.apiResourceTemplate,' in api:',A.apiName,' of tenant domain:',A.apiCreatorTenantDomain,', threshold value:',A.thresholdResponseTime, 'ms.') as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.emails
having str:contains(S.alertTypes, 'AbnormalResponseTime')
insert into EmailAlertStream;

