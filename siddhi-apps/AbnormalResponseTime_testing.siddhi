@App:name('testing')

@App:description("Description of the plan")

define trigger MinTriggerEventStream at every 1 sec;

define stream MinTriggerEventStream (triggered_time long);

-- @sink(type='log') 
-- define stream tempStream( apiContext string, apiPublisher string, apiProviderTenantDomain string, apiResourceTemplate string, apiMethod string, responseTime long,backendTime long);


define stream request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string, apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiPublisher string, apiProviderTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMediationLatency long, responseMediationLatency long, backendLatency long, otherLatency long);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define aggregation ApiExecutionTimeAggregation 
from request 
select apiName, apiVersion, apiContext, apiPublisher, apiProviderTenantDomain, apiHostname, apiResourceTemplate, apiMethod, avg(responseTime) as responseTime, avg(serviceTime) as serviceTime, avg(backendTime) as backendTime, avg(securityLatency) as securityLatency, avg(throttlingLatency) as throttlingLatency, avg(requestMediationLatency) as requestMediationLatency, avg(responseMediationLatency) as responseMediationLatency, avg(backendLatency) as backendLatency, avg(otherLatency) as otherLatency 
group by apiContext, apiPublisher, apiProviderTenantDomain, apiHostname, apiResourceTemplate, apiMethod 
aggregate by requestTimestamp every seconds...years;


@PrimaryKey('apiContext','apiPublisher', 'apiProviderTenantDomain','apiResourceTemplate','apiMethod')
@store(type = 'rdbms', datasource = 'APIM_TEST')
define table RequestPercentile (apiContext string, apiPublisher string, apiProviderTenantDomain string, apiResourceTemplate string, apiMethod string, responseTimePercentile double, backendTimePercentile double );


from MinTriggerEventStream as T join ApiExecutionTimeAggregation as A
  within "2018-01-01 00:00:00 +05:30", "2019-01-01 00:00:00 +05:30"
  per "minutes"
select apiContext, apiPublisher, apiProviderTenantDomain, apiResourceTemplate, apiMethod, responseTime*1.0 as responseTime, backendTime *1.0 as backendTime
group by  apiContext, apiPublisher, apiProviderTenantDomain, apiResourceTemplate, apiMethod
insert into tempStream;

from tempStream
select apiContext, apiPublisher, apiProviderTenantDomain, apiResourceTemplate, apiMethod,math:percentile(responseTime*1.0, 95.0) as responseTimePercentile ,math:percentile(backendTime *1.0,95.0) as backendTimePercentile
group by  apiContext, apiPublisher, apiProviderTenantDomain, apiResourceTemplate, apiMethod
insert into calculatedStream;

from calculatedStream#log("INFO", "Sample Event :", true)
select *
insert into barStream;

from calculatedStream
select apiContext, apiPublisher, apiProviderTenantDomain, apiResourceTemplate, apiMethod, responseTimePercentile, backendTimePercentile
update or insert into RequestPercentile
set RequestPercentile.responseTimePercentile = responseTimePercentile, RequestPercentile.backendTimePercentile = backendTimePercentile
on RequestPercentile.apiContext == apiContext and RequestPercentile.apiPublisher == apiPublisher and RequestPercentile.apiProviderTenantDomain == apiProviderTenantDomain and RequestPercentile.apiResourceTemplate == apiResourceTemplate and RequestPercentile.apiMethod == apiMethod
