@App:name("ABNORMAL_REQUEST_COUNT")
@App:description("Identifies the API requests with abnormal request count per minute and add to AllAlertStream and AbnormalRequestCountAlertStream")

define trigger MinTriggerEventStream at every 1 min;
define stream MinTriggerEventStream (triggered_time long);

define stream request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
-- Overall API usage summary. depends on the user and the application. 
@store(type = 'rdbms', datasource = 'APIM_TEST')
define aggregation ApiUsageAggregation 
from request 
select apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, applicationOwner, username, userTenantDomain, count(apiName) as totalRequestCount, gatewayType, label 
group by apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, username, userTenantDomain
aggregate by requestTimestamp every seconds...years;

-- Table definitions
@PrimaryKey('applicationName', 'applicationId','apiName', 'apiVersion')
@store(type = 'rdbms', datasource = 'APIM_TEST')
define table ApiSubscriberAlertConfiguration (applicationId string,apiName string, apiVersion string, thresholdRequestCountPerMin int);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AbnormalRequestsPerMinAlert(applicationName	string, applicationOwner string, tenantDomain string, apiName string,apiVersion string,requestCountPerMin long,   thresholdRequestCountPerMin	int, message string,severity int, alertTimestamp long);

from MinTriggerEventStream#log("INFO", "Sample Event :", true)
select *
insert into barStream;
  
from MinTriggerEventStream 
select currentTimeMillis() as currentTimestamp, (currentTimeMillis() - 5*60*1000) as endTimestamp
insert into TriggerInfoStream;

from TriggerInfoStream as T join ApiUsageAggregation as A
within T.endTimestamp, T.currentTimestamp
  per "minutes"
select apiName, apiVersion, applicationId, applicationName, applicationOwner, userTenantDomain as tenantDomain, totalRequestCount as requestCountPerMin, gatewayType, label 
group by applicationId, apiContext, apiCreator, apiCreatorTenantDomain  
insert into RequestsPerMinStream;

-- Filtering abnormal requests comparing with the configuration table
@info(name = 'query2')
from RequestsPerMinStream join ApiSubscriberAlertConfiguration
on ( RequestsPerMinStream.applicationId == ApiSubscriberAlertConfiguration.applicationId and 
    RequestsPerMinStream.apiName == ApiSubscriberAlertConfiguration.apiName and  RequestsPerMinStream.apiVersion == ApiSubscriberAlertConfiguration.apiVersion)
select 
    RequestsPerMinStream.applicationName, RequestsPerMinStream.applicationOwner, RequestsPerMinStream.tenantDomain, RequestsPerMinStream.apiName, 
    RequestsPerMinStream.apiVersion, RequestsPerMinStream.requestCountPerMin, ApiSubscriberAlertConfiguration.thresholdRequestCountPerMin
insert into RequestCountInfoStream;

from RequestCountInfoStream[requestCountPerMin > thresholdRequestCountPerMin and thresholdRequestCountPerMin > 0]
select applicationName, applicationOwner,tenantDomain, apiName, apiVersion, requestCountPerMin, thresholdRequestCountPerMin,
    'Abnormal request count detected during last minute.' as message , 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AbnormalRequestsPerMinAlertStreamTemp;

@info(name = 'query3')
from AbnormalRequestsPerMinAlertStreamTemp#window.length(1) as a left outer join AbnormalRequestsPerMinAlertStreamTemp#window.time(10 minute) as b
on (a.applicationName== b.applicationName and a.applicationOwner== b.applicationOwner and a.tenantDomain == b.tenantDomain and 
    a.apiName == b.apiName and a.apiVersion == b.apiVersion and a.message == b.message)
select  a.applicationName, ifThenElse(a.tenantDomain == 'carbon.super', str:concat(a.applicationOwner, "@carbon.super"), a.applicationOwner) as applicationOwner, 
    a.tenantDomain, a.apiName, a.apiVersion, a.requestCountPerMin, a.thresholdRequestCountPerMin, a.message, a.severity, a.alertTimestamp
having b.apiName is null
insert into AbnormalRequestsPerMinAlertStream ;

@info(name = 'query4')
from AbnormalRequestsPerMinAlertStream
select 'abnormalRequestsPerMin' as type, tenantDomain, str:concat('Abnormal request count detected during last minute using application ', applicationName,' owned by ', applicationOwner,' for api :', apiName,', abnormal request count:', requestCountPerMin, ".") as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into allApimAlertStream;

from AbnormalRequestsPerMinAlertStream
select *
insert into AbnormalRequestsPerMinAlert;