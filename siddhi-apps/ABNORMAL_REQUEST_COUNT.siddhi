@App:name("ABNORMAL_REQUEST_COUNT")
@App:description("Identifies the API requests with abnormal request count per minute and add to AllAlertStream and AbnormalRequestCountAlertStream")

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))
define stream request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
define stream AbnormalRequestsPerMinAlertStream(
    applicationName	string,
    applicationOwner	string,
    tenantDomain string,
    apiName string,
    apiVersion string,
    requestCountPerMin	long,
    thresholdRequestCountPerMin	int,
    message	string,
    severity	int,
    alertTimestamp	long);

define stream AllApimAlertsStream (type string, tenantDomain string, message string, severity int, alertTimestamp long);

-- Table definitions
@PrimaryKey('applicationName', 'applicationId','apiName', 'apiVersion')
@store(type = 'rdbms', datasource = 'APIM_TEST')
define table ApiSubscriberAlertConfiguration (applicationId string,apiName string, apiVersion string, thresholdRequestCountPerMin int);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AbnormalRequestsPerMinAlert(applicationName	string, applicationOwner string, tenantDomain string, apiName string,apiVersion string,requestCountPerMin long,   thresholdRequestCountPerMin	int, message string,severity int, alertTimestamp long);
  
-- Queries
-- Count the number of requests per minute
@info(name='query1') 
from request#window.externalTimeBatch(requestTimestamp, 1 min, 0, 2 min )
select applicationName, applicationId, applicationOwner, userTenantDomain as tenantDomain, apiName, apiVersion, count() as requestCountPerMin
group by applicationId, apiContext, apiCreator, apiCreatorTenantDomain  
insert into RequestsPerMinStream;

-- Filtering abnormal requests comparing with the configuration table
@info(name = 'query2')
from RequestsPerMinStream join ApiSubscriberAlertConfiguration
on ( RequestsPerMinStream.applicationId == ApiSubscriberAlertConfiguration.applicationId and 
    RequestsPerMinStream.apiName == ApiSubscriberAlertConfiguration.apiName and  RequestsPerMinStream.apiVersion == ApiSubscriberAlertConfiguration.apiVersion)
select 
    RequestsPerMinStream.applicationName, RequestsPerMinStream.applicationOwner, RequestsPerMinStream.tenantDomain, RequestsPerMinStream.apiName, 
    RequestsPerMinStream.apiVersion, RequestsPerMinStream.requestCountPerMin, ApiSubscriberAlertConfiguration.thresholdRequestCountPerMin
insert into RequestCountInfoStream;

from RequestCountInfoStream[requestCountPerMin > thresholdRequestCountPerMin and thresholdRequestCountPerMin > 0]
select applicationName, applicationOwner,tenantDomain, apiName, apiVersion, requestCountPerMin, thresholdRequestCountPerMin,
    'Abnormal request count detected during last minute.' as message , 2 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AbnormalRequestsPerMinAlertStreamTemp;

@info(name = 'query3')
from AbnormalRequestsPerMinAlertStreamTemp#window.length(1) as a left outer join AbnormalRequestsPerMinAlertStreamTemp#window.time(10 minute) as b
on (a.applicationName== b.applicationName and a.applicationOwner== b.applicationOwner and a.tenantDomain == b.tenantDomain and 
    a.apiName == b.apiName and a.apiVersion == b.apiVersion and a.message == b.message)
select  a.applicationName, ifThenElse(a.tenantDomain == 'carbon.super', str:concat(a.applicationOwner, "@carbon.super"), a.applicationOwner) as applicationOwner, 
    a.tenantDomain, a.apiName, a.apiVersion, a.requestCountPerMin, a.thresholdRequestCountPerMin, a.message, a.severity, a.alertTimestamp
having b.apiName  is null
insert into AbnormalRequestsPerMinAlertStream ;

@info(name = 'query4')
from AbnormalRequestsPerMinAlertStream
select 'abnormalRequestsPerMin' as type, tenantDomain, str:concat('Abnormal request count detected during last minute using application ', applicationName,' owned by ', applicationOwner,' for api :', apiName,', abnormal request count:', requestCountPerMin, ".") as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into allApimAlertStream;

from AbnormalRequestsPerMinAlertStream
select *
insert into AbnormalRequestsPerMinAlert;

