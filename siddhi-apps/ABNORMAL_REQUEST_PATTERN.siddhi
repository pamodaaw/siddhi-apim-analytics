@App:name("ABNORMAL_REQUEST_PATTERN")

@App:description("Identifies the API requests wchich are outside the normal access pattern and add to AllAlertStream and AbormalRequestPatternStream")

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))
define stream Request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
define stream AllApimAlertsStream (type string, tenantDomain string, message string, severity int, alertTimestamp long);

from Request
select  userTenantDomain as tenantDomain, username,  applicationConsumerKey, applicationName, applicationOwner, str:concat(apiMethod,' ',apiContext,' ',apiResourceTemplate) as state,time:dateFormat(requestTimestamp, 'yyyy-MM-dd HH:mm:ss') as requestTimestamp
insert into StateStream;

from StateStream#markov:markovChain(username, state, 60 min, 0.2, 1, true)
select lastState as startState, transitionProbability, notify, state as endState, tenantDomain, username, applicationConsumerKey, applicationName, applicationOwner, requestTimestamp
insert into TransitionProbabilityStream;

@info(name = 'query5')
from TransitionProbabilityStream [ notify ]
select username, requestTimestamp,  str:concat(startState,' to ',endState) as transition, transitionProbability, applicationConsumerKey, applicationName, applicationOwner, tenantDomain
insert into IntermediateFraudStream;

@info(name = 'query6')
from IntermediateFraudStream
select username, applicationName, applicationOwner, tenantDomain, str:concat('Abnormal request pattern detected.' ,' Suspicious API transition is: ',transition) as message , transition, (time:timestampInMilliseconds()) as alertTimestamp
insert into RequestPatternChangedStreamTemp;

@info(name = 'suppression1')
from RequestPatternChangedStreamTemp#window.length(1) as a left outer join RequestPatternChangedStreamTemp#window.time(10 minute) as b
on ( a.username == b.username and a.applicationName == b.applicationName and a.applicationOwner == b.applicationOwner and a.tenantDomain == b.tenantDomain and a.message == b.message)
select a.username, a.applicationName, a.applicationOwner, a.tenantDomain, a.message, a.transition, a.alertTimestamp
having b.username  is null
insert into RequestPatternChangedStream;

@info(name = 'query11')
from RequestPatternChangedStream
select 'RequestPatternChanged' as type, tenantDomain, str:concat('Abnormal request pattern detected by user :',username,' using application : ',applicationName, ' owned by: ',applicationOwner, ' suspicious API transition is: ',transition, '.') as message, 1 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AllApimAlertsStream;

from all_apim_alerts_stream#log("INFO", "Sample Event :", true)
select message
insert into barStream;
