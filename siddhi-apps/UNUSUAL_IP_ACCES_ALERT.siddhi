@App:name("UNUSUAL_IP_ACCES_ALERT")
@App:description("Alerts if an access from a strange ip is detected")

define stream Request (
    meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string
    );

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
define table IPAccessAbnormalityAlert (type string, message string, severity int, ip string, applicationName string, applicationOwner string, username string,tenantDomain string, requestTimestamp long, alertTimestamp long);


@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@PrimaryKey('applicationConsumerKey','ip')
define table IPAccessSummary (username string, applicationConsumerKey string, ip string, lastAccessedDate long) ;

@store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB')
@PrimaryKey('applicationConsumerKey','username')
define table IPAccessAlertCount (username string, applicationConsumerKey string, requestCount long) ;

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AlertStakeholderInfo(userId string, alertType	string, emails	string, isSubscriber bool, isPublisher	bool, isAdmin	bool);

@sink(type='log') 
define stream TempStream(applicationConsumerKey string , userTenantDomain string , applicationName string, applicationOwner string, username string, requestHostName string, ip string , requestTimestamp long ,lastAccessedDate long, count long);

@sink(type='log')
define stream NewConsumerKeyStream(username string,applicationConsumerKey string, ip string,lastAccessedDate long, count long );

@sink(type='log') 
define stream ExistingUserStream(applicationConsumerKey string, userTenantDomain string, applicationName string, applicationOwner string, username string, requestHostName string, ip string, requestTimestamp long, lastAccessedDate long , requestCount long );

@sink(type='log') 
define stream IPAccessAlertCountStream(username string ,applicationConsumerKey string,requestCount long);

define trigger MinTrigger at every 1 min;

from MinTrigger right outer join IPAccessSummary
select username,applicationConsumerKey,ip,lastAccessedDate
insert into IPAccessSummaryStream;

from MinTrigger right outer join IPAccessAlertCount
select username,applicationConsumerKey,requestCount
insert into IPAccessAlertCountStream;


@info(name = 'query1')
from Request[applicationConsumerKey == IPAccessSummaryStream.applicationConsumerKey]#window.length(1) as api left outer join IPAccessSummary as ais
on api.applicationConsumerKey == ais.applicationConsumerKey and api.userIp == ais.ip
select api.applicationConsumerKey as applicationConsumerKey, api.userTenantDomain as userTenantDomain, api.applicationName as applicationName ,  api.applicationOwner as applicationOwner,  api.username as username, api.userIp as requestHostName, ais.ip as ip, api.requestTimestamp, ais.lastAccessedDate as lastAccessedDate, count() as count 
insert into TempStream;

@info(name = 'query2')
from Request[not (applicationConsumerKey == IPAccessSummary.applicationConsumerKey in IPAccessSummary)]
select username, applicationConsumerKey, userIp as ip, requestTimestamp as lastAccessedDate, count() as count
insert into NewConsumerKeyStream;

@info(name = 'query3')
from NewConsumerKeyStream
select username, applicationConsumerKey, ip, lastAccessedDate
insert into IPAccessSummary;

-- Adding the alert count
@info(name = 'query4')
from NewConsumerKeyStream
select username, applicationConsumerKey, count as requestCount
insert into IPAccessAlertCount;

@info(name = 'query5') 
from TempStream as ts join IPAccessAlertCount as iaac
on ts.applicationConsumerKey == iaac.applicationConsumerKey and ts.username == iaac.username
select ts.applicationConsumerKey as applicationConsumerKey, ts.userTenantDomain, ts.applicationName , ts.applicationOwner , ts.username as username, ts.requestHostName as requestHostName, ts.ip as ip, ts.requestTimestamp, ts.lastAccessedDate as lastAccessedDate, (ts.count + iaac.requestCount) as requestCount
insert into ExistingUserStream;

@info(name = 'query6')
from ExistingUserStream
select username, applicationConsumerKey, requestCount
update or insert into IPAccessAlertCount 
set IPAccessAlertCount.requestCount = requestCount on 
IPAccessAlertCount.username == username;

@info(name = 'query7')
from ExistingUserStream[ip is null and requestCount > 10]
select *
insert into NewIPDetectedStream;

@info(name = 'query8')
from NewIPDetectedStream
select "UnusualIPAccessAlert" as type, "A request from a new IP detected." as message, 2 as severity, requestHostName as ip, applicationName, applicationOwner, username, userTenantDomain as tenantDomain, requestTimestamp,(time:timestampInMilliseconds()) as alertTimestamp
insert into AlertIpAccessAbnormalityStream;

@info(name = 'query9')
from NewIPDetectedStream
select username, applicationConsumerKey, requestHostName as ip, requestTimestamp as lastAccessedDate
insert into IPAccessSummary;

-- Check if the request for the IP is received after the threshold time gap
@info(name = 'query10')
from ExistingUserStream[(not (ip is null)) and requestCount > 10]
select requestHostName, applicationConsumerKey, applicationName, applicationOwner, (requestTimestamp - lastAccessedDate) as timeBetweenAccess, requestTimestamp, username, userTenantDomain as tenantDomain, lastAccessedDate
insert into CheckAbnormalTimeBetweenAccessStream;

@info(name = 'query11')
from CheckAbnormalTimeBetweenAccessStream[timeBetweenAccess > (60)]
select *
insert into AbnormalTimeBetweenAccessStream;

@info(name = 'query12')
from AbnormalTimeBetweenAccessStream
select "UnusualIPAccessAlert" as type, "A request from an old IP detected." as message, 2 as severity, requestHostName as ip, applicationName, applicationOwner, username,tenantDomain , requestTimestamp,(time:timestampInMilliseconds()) as alertTimestamp
insert into AlertIpAccessAbnormalityStream;

-- Send all the alerts to the Global Alert Stream
@info(name = 'query13')
from AlertIpAccessAbnormalityStream
select type, tenantDomain, str:concat("A request from a ", ifThenElse(str:contains(message, 'old'), 'old','new'), " IP (", ip, ") detected by user:" , username,  " using application:", applicationName, " owned by ", applicationOwner, ".") as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AllApimAlert;

from AlertIpAccessAbnormalityStream
select *
insert into IPAccessAbnormalityAlert;


-- Update the request time for the lastAccessDate
@info(name = 'query14')
from CheckAbnormalTimeBetweenAccessStream[timeBetweenAccess > 60]
select username, applicationConsumerKey, requestHostName as ip, requestTimestamp as lastAccessedDate
update or insert into IPAccessSummary
set IPAccesSummary.lastAccessedDate=lastAccessedDate on
IPAccessSummary.applicationConsumerKey == applicationConsumerKey and IPAccessSummary.ip == ip;


from AlertIpAccessAbnormalityStream#window.length(1) join AlertStakeholderInfo as ASI
on ((AlertIpAccessAbnormalityStream.applicationOwner == ASI.userId and true == ASI.isSubscriber ) or true == ASI.isAdmin )
select 'UnusualIPAccessAlert' as type , str:concat("A request from a ", ifThenElse(str:contains(message, 'old'), 'old','new'), " IP (", ip, ") detected by user:" , AlertIpAccessAbnormalityStream.username,  " using application:", applicationName, " owned by ", applicationOwner, ".") as msg, time:dateFormat(AlertIpAccessAbnormalityStream.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, ASI.emails
having  str:contains(ASI.alertType, 'UnusualIPAccessAlert')
insert into EmailAlertStream;




