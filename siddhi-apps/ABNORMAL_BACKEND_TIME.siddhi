@App:name("ABNORMAL_RESPONSE_TIME")
@App:description("Identifies the API requests with abnormal backend time and add to AllAlertStream and AbnormalBackendTimeAlertStream")

@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))
define stream request (meta_clientType string, 
    applicationConsumerKey string, 
    applicationName string,
    applicationId string,
    applicationOwner string, 
    apiContext string,
    apiName string,
    apiVersion string,
    apiResourcePath string,
    apiResourceTemplate string,
    apiMethod string,
    apiCreator string,
    apiCreatorTenantDomain string,
    apiTier string,
    apiHostname string, 
    username string,
    userTenantDomain string,
    userIp string,
    userAgent string, 
    requestTimestamp long,
    throttledOut bool,
    responseTime long,
    serviceTime long,
    backendTime long,
    responseCacheHit bool,
    responseSize long,
    protocol string,
    responseCode int,
    destination string,
    securityLatency long,
    throttlingLatency long,
    requestMediationLatency long,
    responseMediationLatency long,
    backendLatency long,
    otherLatency long, 
    gatewayType string,
    label string);
    
define stream AbnormalBackendTimeAlertStream( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, backendTime long, thresholdBackendTime long, message string, severity int,alertTimestamp long);

@sink(type="inMemory", topic="EMAIL_NOTIFICATION", @map(type='passThrough'))
define stream EmailAlertStream (type	string, message	string, alertTimestamp	string, email	string);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AlertStakeholderInfo(userId string, alertType	string, email	string, isSubscriber bool, isPublisher	bool, isAdmin	bool);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);

@store(type = 'rdbms', datasource = 'APIM_TEST')
define table AbnormalBackendTimeAlert (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, backendTime long, thresholdBackendTime long,
    message string, severity int, alertTimestamp long);

@info(name = 'configurationInfoRetrievQuery')
from request join ApiCreatorAlertConfiguration
on(request.apiName == ApiCreatorAlertConfiguration.apiName and request.apiVersion == ApiCreatorAlertConfiguration.apiVersion and request.apiCreatorTenantDomain == ApiCreatorAlertConfiguration.apiCreatorTenantDomain )
select request.apiName, request.apiVersion, ifThenElse(request.apiCreatorTenantDomain == 'carbon.super', str:concat(request.apiCreator, "@carbon.super"), request.apiCreator) as apiCreator, request.apiCreatorTenantDomain, 
    request.backendTime, request.apiResourceTemplate, request.apiMethod, ApiCreatorAlertConfiguration.thresholdBackendTime
insert into BackendTimeInfoStream;

@info(name = 'backendTimeExceedFilterQuery')
from BackendTimeInfoStream[backendTime > thresholdBackendTime and thresholdBackendTime > 0]
select apiName, apiVersion, apiCreator, apiCreatorTenantDomain, apiResourceTemplate, apiMethod, backendTime, thresholdBackendTime , 
    'Abnormal backend time detected.' as message, 3 as severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AbnormalBackendTimeAlertStreamTemp;

@info(name = 'repeatedAlertIgnoreQuery')
from AbnormalBackendTimeAlertStreamTemp#window.length(1) as a left outer join AbnormalBackendTimeAlertStreamTemp#window.time(10 minute) as b
on (a.apiName == b.apiName and a.apiVersion== b.apiVersion and a.apiCreator== b.apiCreator and a.apiCreatorTenantDomain==b.apiCreatorTenantDomain and 
    a.apiResourceTemplate==b.apiResourceTemplate and a.apiMethod== b.apiMethod and a.message== b.message)
select a.apiName, a.apiVersion, a.apiCreator, a.apiCreatorTenantDomain, a.apiResourceTemplate, a.apiMethod, a.backendTime, a.thresholdBackendTime, a.message as message, a.severity, a.alertTimestamp
having b.apiName  is null
insert into AbnormalBackendTimeAlertStream;

@info(name = 'commonAlertDabaseInsertQuery')
from AbnormalBackendTimeAlertStream
select 'AbnormalBackendTime' as type, apiCreatorTenantDomain as tenantDomain, str:concat('Abnormal backend time detected for http ',apiMethod,' method of resource template:',apiResourceTemplate,' in api:', apiName,' of tenant domain:',apiCreatorTenantDomain,', threshold value:',thresholdBackendTime, 'ms.') as message, severity, (time:timestampInMilliseconds()) as alertTimestamp
insert into AllApimAlert;

@info(name='dbInsertQuery') 
from AbnormalBackendTimeAlertStream
select *
insert into AbnormalBackendTimeAlert;

@info(name='customizeEmailMessageGenerateQuery') 
from AbnormalBackendTimeAlertStream#window.length(1) as A join AlertStakeholderInfo as S
on ((A.apiCreator == S.userId and true == S.isPublisher ) or true == S.isAdmin )
select 'AbnormalBackendTime' as type , str:concat('Abnormal backend response time detected for http ', A.apiMethod,' method of resource template:', A.apiResourceTemplate,' in api:',A.apiName,' of tenant domain:',A.apiCreatorTenantDomain,', threshold value:',A.thresholdBackendTime, 'ms.') as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.email
having  str:contains(S.alertType, 'AbnormalBackendTime')
insert into EmailAlertStream;
