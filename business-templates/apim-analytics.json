{
   "templateGroup": {
      "uuid": "apim-analytics",
      "name": "APIM Analytics",
      "description": "Real Time and Batch Analytics of APIM",
      "ruleTemplates": [
         {
            "uuid": "abnormal-response-time-alert",
            "name": "Abnormal Response Time Alert",
            "description": "Detects requests with response time greater than a configured threshold value and triggers an alert",
            "type": "template",
            "instanceCount": "one",
            "script": "",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"ABNORMAL_RESPONSE_TIME\")\n@App:description(\"Identifies the API requests with abnormal response time and add to AllAlertStream and AbnormalResponseTimeAlertStream\")\n\n@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))\ndefine stream Request (meta_clientType string, \n    applicationConsumerKey string, \n    applicationame string,\n    applicationId string,\n    applicationOwner string, \n    apiContext string,\n    apiName string,\n    apiVersion string,\n    apiResourcePath string,\n    apiResourceTemplate string,\n    apiMethod string,\n    apiCreator string,\n    apiCreatorTenantDomain string,\n    apiTier string,\n    apiHostname string, \n    username string,\n    userTenantDomain string,\n    userIp string,\n    userAgent string, \n    requestTimestamp long,\n    throttledOut bool,\n    responseTime long,\n    serviceTime long,\n    backendTime long,\n    responseCacheHit bool,\n    responseSize long,\n    protocol string,\n    responseCode int,\n    destination string,\n    securityLatency long,\n    throttlingLatency long,\n    requestMediationLatency long,\n    responseMediationLatency long,\n    backendLatency long,\n    otherLatency long, \n    gatewayType string,\n    label string);\n    \ndefine stream AbnormalResponseTimeAlertStream( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, responseTime long, thresholdResponseTime long, message string, severity int,alertTimestamp long);\n\n@sink(type=\"inMemory\", topic=\"EMAIL_NOTIFICATION\", @map(type='passThrough'))\ndefine stream EmailAlertStream (type\tstring, message\tstring, alertTimestamp\tstring, emails\tstring);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AlertStakeholderInfo(userId string, alertTypes\tstring, emails\tstring, isSubscriber bool, isPublisher\tbool, isAdmin\tbool);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AbnormalResponseTimeAlert( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, \n    responseTime long,thresholdResponseTime long, message string, severity int, alertTimestamp long);\n\n@info(name = 'configurationInfoRetrievQuery')\nfrom Request as R join ApiCreatorAlertConfiguration as C\non(R.apiName == C.apiName and R.apiVersion == C.apiVersion and R.apiCreatorTenantDomain == C.apiCreatorTenantDomain )\nselect R.apiName, R.apiVersion, ifThenElse(R.apiCreatorTenantDomain == 'carbon.super', str:concat(R.apiCreator, \"@carbon.super\"), R.apiCreator) as apiCreator, R.apiCreatorTenantDomain, \n    R.responseTime, R.apiResourceTemplate, R.apiMethod, C.thresholdResponseTime\ninsert into ResponseTimeInfoStream;\n\n@info(name = 'responseTimeExceedFilterQuery')\nfrom ResponseTimeInfoStream[responseTime > thresholdResponseTime and thresholdResponseTime > 0]\nselect apiName, apiVersion, apiCreator, apiCreatorTenantDomain, apiResourceTemplate, apiMethod, responseTime, thresholdResponseTime , \n    'Abnormal response time detected.' as message, ${severityLevel} as severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AbnormalResponseTimeAlertStreamTemp;\n\n@info(name = 'repeatedAlertIgnoreQuery')\nfrom AbnormalResponseTimeAlertStreamTemp#window.length(1) as a left outer join AbnormalResponseTimeAlertStreamTemp#window.time(${suppressionPeriod} minute) as b\non (a.apiName == b.apiName and a.apiVersion== b.apiVersion and a.apiCreator== b.apiCreator and a.apiCreatorTenantDomain==b.apiCreatorTenantDomain and \n    a.apiResourceTemplate==b.apiResourceTemplate and a.apiMethod== b.apiMethod and a.message== b.message)\nselect a.apiName as apiName, a.apiVersion as apiVersion, a.apiCreator as apiCreator, a.apiCreatorTenantDomain as apiCreatorTenantDomain, a.apiResourceTemplate as apiResourceTemplate,\n    a.apiMethod as apiMethod, a.responseTime as responseTime, a.thresholdResponseTime as thresholdResponseTime, a.message as message, a.severity as severity, a.alertTimestamp as alertTimestamp\nhaving b.apiName  is null\ninsert into AbnormalResponseTimeAlertStream;\n\n@info(name = 'commonAlertDabaseInsertQuery')\nfrom AbnormalResponseTimeAlertStream\nselect 'AbnormalResponseTime' as type, apiCreatorTenantDomain as tenantDomain, str:concat('Abnormal response time detected for http ',apiMethod,' method of resource template:',apiResourceTemplate,' in api:', apiName,' of tenant domain:',apiCreatorTenantDomain,', threshold value:',thresholdResponseTime, 'ms.') as message, severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AllApimAlert;\n\n@info(name='dbInsertQuery') \nfrom AbnormalResponseTimeAlertStream\nselect *\ninsert into AbnormalResponseTimeAlert;\n\n@info(name = 'customizeEmailMessageGenerateQuery')\nfrom AbnormalResponseTimeAlertStream#window.length(1) as A join AlertStakeholderInfo as S\non ((A.apiCreator == S.userId and true == S.isPublisher ) or true == S.isAdmin )\nselect 'AbnormalResponseTime' as type , str:concat('Abnormal response time detected for http ',A.apiMethod,' method of resource template:',A.apiResourceTemplate,' in api:',A.apiName,' of tenant domain:',A.apiCreatorTenantDomain,', threshold value:',A.thresholdResponseTime, 'ms.') as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.emails\nhaving str:contains(S.alertTypes, 'AbnormalResponseTime')\ninsert into EmailAlertStream;\n"
               }
            ],
            "properties": {
               "severityLevel": {
                  "fieldName": "Severity Level of Abnormal Response Time",
                  "description": "Severity level of the abnormal response time alert:(1:severe,2:moderate,3:mild)",
                  "defaultValue": "3",
                  "options": [
                     "1",
                     "2",
                     "3"
                  ]
               },
               "suppressionPeriod": {
                  "fieldName": "Alert Suppression Period in Minutes",
                  "description": "Time period to wait before resending the same alert",
                  "defaultValue": "10"
               }
            }
         },
         {
            "uuid": "abnormal-backend-time-alert",
            "name": "Abnormal Backend Time Alert",
            "description": "Detects requests with backend time greater than a configured threshold value and triggers an alert",
            "type": "template",
            "instanceCount": "one",
            "script": "",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"ABNORMAL_RESPONSE_TIME\")\n@App:description(\"Identifies the API requests with abnormal backend time and add to AllAlertStream and AbnormalBackendTimeAlertStream\")\n\n@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))\ndefine stream Request (meta_clientType string, \n    applicationConsumerKey string, \n    applicationName string,\n    applicationId string,\n    applicationOwner string, \n    apiContext string,\n    apiName string,\n    apiVersion string,\n    apiResourcePath string,\n    apiResourceTemplate string,\n    apiMethod string,\n    apiCreator string,\n    apiCreatorTenantDomain string,\n    apiTier string,\n    apiHostname string, \n    username string,\n    userTenantDomain string,\n    userIp string,\n    userAgent string, \n    requestTimestamp long,\n    throttledOut bool,\n    responseTime long,\n    serviceTime long,\n    backendTime long,\n    responseCacheHit bool,\n    responseSize long,\n    protocol string,\n    responseCode int,\n    destination string,\n    securityLatency long,\n    throttlingLatency long,\n    requestMediationLatency long,\n    responseMediationLatency long,\n    backendLatency long,\n    otherLatency long, \n    gatewayType string,\n    label string);\n    \ndefine stream AbnormalBackendTimeAlertStream( apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, backendTime long, thresholdBackendTime long, message string, severity int,alertTimestamp long);\n\n@sink(type=\"inMemory\", topic=\"EMAIL_NOTIFICATION\", @map(type='passThrough'))\ndefine stream EmailAlertStream (type\tstring, message\tstring, alertTimestamp\tstring, emails\tstring);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AlertStakeholderInfo(userId string, alertTypes\tstring, emails\tstring, isSubscriber bool, isPublisher\tbool, isAdmin\tbool);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table ApiCreatorAlertConfiguration (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, thresholdResponseTime long, thresholdBackendTime long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AbnormalBackendTimeAlert (apiName string, apiVersion string, apiCreator string, apiCreatorTenantDomain string, apiResourceTemplate string, apiMethod string, backendTime long, thresholdBackendTime long,\n    message string, severity int, alertTimestamp long);\n\n@info(name = 'configurationInfoRetrieveQuery')\nfrom Request as R join ApiCreatorAlertConfiguration as C\non(R.apiName == C.apiName and R.apiVersion == C.apiVersion and R.apiCreatorTenantDomain == C.apiCreatorTenantDomain )\nselect R.apiName, R.apiVersion, ifThenElse(R.apiCreatorTenantDomain == 'carbon.super', str:concat(R.apiCreator, \"@carbon.super\"), R.apiCreator) as apiCreator, R.apiCreatorTenantDomain, \n    R.backendTime, R.apiResourceTemplate, R.apiMethod, C.thresholdBackendTime\ninsert into BackendTimeInfoStream;\n\n@info(name = 'backendTimeExceedFilterQuery')\nfrom BackendTimeInfoStream[backendTime > thresholdBackendTime and thresholdBackendTime > 0]\nselect apiName, apiVersion, apiCreator, apiCreatorTenantDomain, apiResourceTemplate, apiMethod, backendTime, thresholdBackendTime , \n    'Abnormal backend time detected.' as message, ${severityLevel} as severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AbnormalBackendTimeAlertStreamTemp;\n\n@info(name = 'repeatedAlertIgnoreQuery')\nfrom AbnormalBackendTimeAlertStreamTemp#window.length(1) as a left outer join AbnormalBackendTimeAlertStreamTemp#window.time(${suppressionPeriod} minute) as b\non (a.apiName == b.apiName and a.apiVersion== b.apiVersion and a.apiCreator== b.apiCreator and a.apiCreatorTenantDomain==b.apiCreatorTenantDomain and \n    a.apiResourceTemplate==b.apiResourceTemplate and a.apiMethod== b.apiMethod and a.message== b.message)\nselect a.apiName, a.apiVersion, a.apiCreator, a.apiCreatorTenantDomain, a.apiResourceTemplate, a.apiMethod, a.backendTime, a.thresholdBackendTime, a.message as message, a.severity, a.alertTimestamp\nhaving b.apiName  is null\ninsert into AbnormalBackendTimeAlertStream;\n\n@info(name = 'commonAlertDabaseInsertQuery')\nfrom AbnormalBackendTimeAlertStream\nselect 'AbnormalBackendTime' as type, apiCreatorTenantDomain as tenantDomain, str:concat('Abnormal backend time detected for http ',apiMethod,' method of resource template:',apiResourceTemplate,' in api:', apiName,' of tenant domain:',apiCreatorTenantDomain,', threshold value:',thresholdBackendTime, 'ms.') as message, severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AllApimAlert;\n\n@info(name='dbInsertQuery') \nfrom AbnormalBackendTimeAlertStream\nselect *\ninsert into AbnormalBackendTimeAlert;\n\n@info(name='customizeEmailMessageGenerateQuery') \nfrom AbnormalBackendTimeAlertStream#window.length(1) as A join AlertStakeholderInfo as S\non ((A.apiCreator == S.userId and true == S.isPublisher ) or true == S.isAdmin )\nselect 'AbnormalBackendTime' as type , str:concat('Abnormal backend response time detected for http ', A.apiMethod,' method of resource template:', A.apiResourceTemplate,' in api:',A.apiName,' of tenant domain:',A.apiCreatorTenantDomain,', threshold value:',A.thresholdBackendTime, 'ms.') as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.emails\nhaving  str:contains(S.alertTypes, 'AbnormalBackendTime')\ninsert into EmailAlertStream;\n\n"
               }
            ],
            "properties": {
               "severityLevel": {
                  "fieldName": "Severity Level of Abnormal Backend Time",
                  "description": "Severity level of the abnormal backend time alert:(1:severe,2:moderate,3:mild)",
                  "defaultValue": "3",
                  "options": [
                     "1",
                     "2",
                     "3"
                  ]
               },
               "suppressionPeriod": {
                  "fieldName": "Alert Suppression Period in Minutes",
                  "description": "Time period to wait before resending the same alert",
                  "defaultValue": "10"
               }
            }
         },
         {
            "uuid": "abnormal-request-count-alert",
            "name": "Abnormal Request Count Alert",
            "description": "Triggers an alert if the number of requests per minute for an application is greater than a configured threshold",
            "type": "template",
            "instanceCount": "one",
            "script": "",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"ABNORMAL_REQUEST_COUNT\")\n@App:description(\"Identifies the API requests with abnormal request count per minute and add to AllAlertStream and AbnormalRequestCountAlertStream\")\n\ndefine trigger MinTriggerEventStream at every 1 min;\ndefine stream MinTriggerEventStream (triggered_time long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);\n\n-- This stream definition is only to define the Aggregation. It does not consume the actual API request.\ndefine stream Request (meta_clientType string,\n    applicationConsumerKey string, \n    applicationName string,\n    applicationId string,\n    applicationOwner string, \n    apiContext string,\n    apiName string,\n    apiVersion string,\n    apiResourcePath string,\n    apiResourceTemplate string,\n    apiMethod string,\n    apiCreator string,\n    apiCreatorTenantDomain string,\n    apiTier string,\n    apiHostname string, \n    username string,\n    userTenantDomain string,\n    userIp string,\n    userAgent string, \n    requestTimestamp long,\n    throttledOut bool,\n    responseTime long,\n    serviceTime long,\n    backendTime long,\n    responseCacheHit bool,\n    responseSize long,\n    protocol string,\n    responseCode int,\n    destination string,\n    securityLatency long,\n    throttlingLatency long,\n    requestMediationLatency long,\n    responseMediationLatency long,\n    backendLatency long,\n    otherLatency long, \n    gatewayType string,\n    label string);\n\n-- Table definitions\n@sink(type=\"inMemory\", topic=\"EMAIL_NOTIFICATION\", @map(type='passThrough'))\ndefine stream EmailAlertStream (type\tstring, message\tstring, alertTimestamp\tstring, emails\tstring);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AlertStakeholderInfo(userId string, alertTypes\tstring, emails\tstring, isSubscriber bool, isPublisher\tbool, isAdmin\tbool);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table ApiSubscriberAlertConfiguration (applicationId string,apiName string, apiVersion string, thresholdRequestCountPerMin int);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AbnormalRequestsPerMinAlert(applicationName\tstring, applicationOwner string, tenantDomain string, apiName string,apiVersion string,requestCountPerMin long,   thresholdRequestCountPerMin\tint, message string,severity int, alertTimestamp long);\n\n-- This aggregation definition is only for retrieving data. No data is actually aggregated from this.\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine aggregation ApiUserPerAppAgg\nfrom Request \nselect apiName, apiVersion, apiContext, apiCreator, apiCreatorTenantDomain, apiHostname, applicationId, applicationName, applicationOwner, username, userTenantDomain, count(apiName) as totalRequestCount, gatewayType, label \ngroup by apiContext,apiHostname, applicationId, username, userTenantDomain\naggregate by requestTimestamp every seconds...years;\n\n-- Generate a event every one minute. The time period within which the abnormal request count should be considered is substracted from the current timestamp.\nfrom MinTriggerEventStream \nselect currentTimeMillis() as currentTimestamp, (currentTimeMillis() - 5*60*1000) as endTimestamp\ninsert into TriggerInfoStream;\n\n@info(name='requestsPerMinCountingQuery') \nfrom TriggerInfoStream as T join ApiUserPerAppAgg as A\nwithin T.endTimestamp, T.currentTimestamp\n  per \"minutes\"\nselect apiName, apiVersion, applicationId, applicationName, applicationOwner, userTenantDomain as tenantDomain, totalRequestCount as requestCountPerMin, gatewayType, label \ngroup by applicationId, apiContext, apiCreator, apiCreatorTenantDomain  \ninsert into RequestsPerMinStream;\n\n-- Filtering abnormal requests comparing with the configuration table\n@info(name = 'configurationInfoRetrieveQuery')\nfrom RequestsPerMinStream join ApiSubscriberAlertConfiguration\non ( RequestsPerMinStream.applicationId == ApiSubscriberAlertConfiguration.applicationId and \n    RequestsPerMinStream.apiName == ApiSubscriberAlertConfiguration.apiName and  RequestsPerMinStream.apiVersion == ApiSubscriberAlertConfiguration.apiVersion)\nselect \n    RequestsPerMinStream.applicationName, RequestsPerMinStream.applicationOwner, RequestsPerMinStream.tenantDomain, RequestsPerMinStream.apiName, \n    RequestsPerMinStream.apiVersion, RequestsPerMinStream.requestCountPerMin, ApiSubscriberAlertConfiguration.thresholdRequestCountPerMin\ninsert into RequestCountInfoStream;\n\n@info(name = 'requestCountExceedFilterQuery')\nfrom RequestCountInfoStream[requestCountPerMin > thresholdRequestCountPerMin and thresholdRequestCountPerMin > 0]\nselect applicationName, applicationOwner,tenantDomain, apiName, apiVersion, requestCountPerMin, thresholdRequestCountPerMin,\n    'Abnormal request count detected during last minute.' as message , ${severityLevel} as severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AbnormalRequestsPerMinAlertStreamTemp;\n\n@info(name = 'repeatedAlertIgnoreQuery')\nfrom AbnormalRequestsPerMinAlertStreamTemp#window.length(1) as a left outer join AbnormalRequestsPerMinAlertStreamTemp#window.time(${suppressionPeriod} minute) as b\non (a.applicationName== b.applicationName and a.applicationOwner== b.applicationOwner and a.tenantDomain == b.tenantDomain and \n    a.apiName == b.apiName and a.apiVersion == b.apiVersion and a.message == b.message)\nselect  a.applicationName, ifThenElse(a.tenantDomain == 'carbon.super', str:concat(a.applicationOwner, \"@carbon.super\"), a.applicationOwner) as applicationOwner, \n    a.tenantDomain, a.apiName, a.apiVersion, a.requestCountPerMin, a.thresholdRequestCountPerMin, a.message, a.severity, a.alertTimestamp\nhaving b.apiName is null\ninsert into AbnormalRequestsPerMinAlertStream ;\n\n@info(name = 'commonAlertdatabaseInsertQuery')\nfrom AbnormalRequestsPerMinAlertStream\nselect 'AbnormalRequestsPerMin' as type, tenantDomain, str:concat('Abnormal request count detected during last minute using application ', applicationName,' owned by ', applicationOwner,' for api :', apiName,', abnormal requst count:', requestCountPerMin, \".\") as message, severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AllApimAlert;\n\n@info(name='dbInsertQuery') \nfrom AbnormalRequestsPerMinAlertStream\nselect *\ninsert into AbnormalRequestsPerMinAlert;\n\n@info(name = 'query1')\nfrom AbnormalRequestsPerMinAlertStream#window.length(1) as A join AlertStakeholderInfo as S\non ((A.applicationOwner == S.userId and true == S.isSubscriber ) or true == S.isAdmin )\nselect 'AbnormalRequestsPerMin' as type , str:concat('Abnormal request count detected during last minute using application ', A.applicationName,' owned by ', A.applicationOwner,' for api :', A.apiName,', abnormal request count:', A.requestCountPerMin, \".\") as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.emails\nhaving str:contains(S.alertTypes, 'AbnormalRequestsPerMin')\ninsert into EmailAlertStream;\n\n"
               }
            ],
            "properties": {
               "severityLevel": {
                  "fieldName": "Severity Level of Abnormal Request Count",
                  "description": "Severity level of abnormal request count per minute alert:(1:severe,2:moderate,3:mild)",
                  "defaultValue": "2",
                  "options": [
                     "1",
                     "2",
                     "3"
                  ]
               },
               "suppressionPeriod": {
                  "fieldName": "Alert Suppression Period in Minutes",
                  "description": "Time period to wait before resending the same alert",
                  "defaultValue": "10"
               }
            }
         },
         {
            "uuid": "abnormal-resource-access-pattern-alert",
            "name": "Abnormal Resource Access Pattern Alert",
            "description": "Triggers an alert if there is a change in the resource access pattern of a for a particular application",
            "type": "template",
            "instanceCount": "one",
            "script": "",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"ABNORMAL_REQUEST_PATTERN\")\n\n@App:description(\"Identifies the API requests wchich are outside the normal access pattern and add to AllAlertStream and AbormalRequestPatternStream\")\n\n@source(type = 'wso2event', wso2.stream.id = 'org.wso2.apimgt.statistics.request:3.0.0', @map(type = 'wso2event'))\ndefine stream Request (meta_clientType string, \n    applicationConsumerKey string, \n    applicationName string,\n    applicationId string,\n    applicationOwner string, \n    apiContext string,\n    apiName string,\n    apiVersion string,\n    apiResourcePath string,\n    apiResourceTemplate string,\n    apiMethod string,\n    apiCreator string,\n    apiCreatorTenantDomain string,\n    apiTier string,\n    apiHostname string, \n    username string,\n    userTenantDomain string,\n    userIp string,\n    userAgent string, \n    requestTimestamp long,\n    throttledOut bool,\n    responseTime long,\n    serviceTime long,\n    backendTime long,\n    responseCacheHit bool,\n    responseSize long,\n    protocol string,\n    responseCode int,\n    destination string,\n    securityLatency long,\n    throttlingLatency long,\n    requestMediationLatency long,\n    responseMediationLatency long,\n    backendLatency long,\n    otherLatency long, \n    gatewayType string,\n    label string);\n    \n@sink(type=\"inMemory\", topic=\"EMAIL_NOTIFICATION\", @map(type='passThrough'))\ndefine stream EmailAlertStream (type\tstring, message\tstring, alertTimestamp\tstring, emails\tstring);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AlertStakeholderInfo(userId string, alertTypes\tstring, emails\tstring, isSubscriber bool, isPublisher\tbool, isAdmin\tbool);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table AllApimAlert (type string, tenantDomain string, message string, severity int, alertTimestamp long);\n\n@store(type = 'rdbms', datasource = 'APIM_TEST')\ndefine table RequestPatternChangedAlert (username string, applicationName string, applicationOwner string, tenantDomain string, message string, severity int, alertTimestamp long);\n\n@info(name='stateStreamGenerateQuery') \nfrom Request\nselect  userTenantDomain as tenantDomain, username,  applicationConsumerKey, applicationName, applicationOwner, str:concat(apiMethod,' ',apiContext,' ',apiResourceTemplate) as state,time:dateFormat(requestTimestamp, 'yyyy-MM-dd HH:mm:ss') as requestTimestamp\ninsert into StateStream;\n\n@info(name='markovChaniGenerateQuery') \nfrom StateStream#markov:markovChain(username, state, ${durationToKeep} min, ${probabilityThreshold}, ${requestCount}, true)\nselect lastState as startState, transitionProbability, notify, state as endState, tenantDomain, username, applicationConsumerKey, applicationName, applicationOwner, requestTimestamp\ninsert into TransitionProbabilityStream;\n\n@info(name = 'abnormalPatternFilterQuery')\nfrom TransitionProbabilityStream [ notify ]\nselect username, requestTimestamp,  str:concat(startState,' to ',endState) as transition, transitionProbability, applicationConsumerKey, applicationName, applicationOwner, tenantDomain\ninsert into IntermediateFraudStream;\n\n@info(name = 'detailedAlertGenerateQuery')\nfrom IntermediateFraudStream\nselect username, applicationName, applicationOwner, tenantDomain, str:concat('Abnormal request pattern detected.' ,' Suspicious API transition is: ',transition) as message , transition, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into RequestPatternChangedStreamTemp;\n\n@info(name = 'repeatedAlertIgnoreQuery')\nfrom RequestPatternChangedStreamTemp#window.length(1) as a left outer join RequestPatternChangedStreamTemp#window.time(${suppressionPeriod} minute) as b\non ( a.username == b.username and a.applicationName == b.applicationName and a.applicationOwner == b.applicationOwner and a.tenantDomain == b.tenantDomain and a.message == b.message)\nselect a.username, a.applicationName, a.applicationOwner, a.tenantDomain, a.message, a.transition, a.alertTimestamp\nhaving b.username  is null\ninsert into RequestPatternChangedAlertStream;\n\n@info(name = 'commonAlertDabaseInsertQuery')\nfrom RequestPatternChangedAlertStream\nselect 'RequestPatternChanged' as type, tenantDomain, str:concat('Abnormal request pattern detected by user :',username,' using application : ',applicationName, ' owned by: ',applicationOwner, ' suspicious API transition is: ',transition, '.') as message, ${severityLevel} as severity, (time:timestampInMilliseconds()) as alertTimestamp\ninsert into AllApimAlert;\n\n@info(name='dbInsertQuery') \nfrom RequestPatternChangedAlertStream\nselect username, applicationName, applicationOwner, tenantDomain, message, ${severityLevel} as severity, alertTimestamp\ninsert into RequestPatternChangedAlert;\n\n@info(name = 'customizeEmailMessageGenerateQuery')\nfrom RequestPatternChangedAlertStream#window.length(1) as A join AlertStakeholderInfo as S\non ((A.applicationOwner == S.userId and true == S.isSubscriber ) or true == S.isAdmin )\nselect 'RequestPatternChanged' as type , str:concat(A.message,  ' by user :',A.username,' using application : ',A.applicationName, ' owned by: ',A.applicationOwner, '.') as message, time:dateFormat(A.alertTimestamp,'yyyy-MM-dd HH:mm:ss') as alertTimestamp, S.emails\nhaving str:contains(S.alertTypes, 'RequestPatternChanged')\ninsert into EmailAlertStream;\n"
               }
            ],
            "properties": {
               "durationToKeep": {
                  "fieldName": "Duration to keep an event in minutes",
                  "description": "The maximum time duration to be considered for a continuous state change of a particular  user",
                  "defaultValue": "60"
               },
               "probabilityThreshold": {
                  "fieldName": "The alert threshold probability",
                  "description": "Alert is triggered if the probability is below this value. (0 < threshold < 1)",
                  "defaultValue": "0.2"
               },
               "requestCount": {
                  "fieldName": "Number of requests to train the model",
                  "description": "This number of requests is considered to train the Markov Matrix before generating alerts",
                  "defaultValue": "500"
               },
               "suppressionPeriod": {
                  "fieldName": "Alert Suppression Period in Minutes",
                  "description": "Time period to wait before resending the same alert",
                  "defaultValue": "10"
               },
               "severityLevel": {
                  "fieldName": "Severity Level of Abnormal Response Time",
                  "description": "Severity level of the abnormal response time alert:(1:severe,2:moderate,3:mild)",
                  "defaultValue": "1",
                  "options": [
                     "1",
                     "2",
                     "3"
                  ]
               }
            }
         }
      ]
   }
}